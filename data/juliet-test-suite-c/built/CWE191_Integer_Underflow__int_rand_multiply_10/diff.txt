2813a2814,2821
> # 48 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_10.c"
> static void goodB2G1()
> {
>     int data;
> 
>     data = 0;
>     if(globalTrue)
>     {
2814a2823,2826
>         data = ((int)(rand() & 1 ? (((unsigned)rand()<<30) ^ ((unsigned)rand()<<15) ^ rand()) : -(((unsigned)rand()<<30) ^ ((unsigned)rand()<<15) ^ rand()) - 1));
>     }
>     if(globalFalse)
>     {
2815a2828,2833
>         printLine("Benign, fixed string");
>     }
>     else
>     {
>         if(data < 0)
>         {
2817c2835,2853
< void CWE191_Integer_Underflow__int_rand_multiply_10_bad()
---
>             if (data > (
> # 68 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_10.c" 3 4
>                        (-0x7fffffff - 1)
> # 68 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_10.c"
>                               /2))
>             {
>                 int result = data * 2;
>                 printIntLine(result);
>             }
>             else
>             {
>                 printLine("data value is too small to perform multiplication.");
>             }
>         }
>     }
> }
> 
> 
> static void goodB2G2()
2831a2868,2927
>             if (data > (
> # 97 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_10.c" 3 4
>                        (-0x7fffffff - 1)
> # 97 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_10.c"
>                               /2))
>             {
>                 int result = data * 2;
>                 printIntLine(result);
>             }
>             else
>             {
>                 printLine("data value is too small to perform multiplication.");
>             }
>         }
>     }
> }
> 
> 
> static void goodG2B1()
> {
>     int data;
> 
>     data = 0;
>     if(globalFalse)
>     {
> 
>         printLine("Benign, fixed string");
>     }
>     else
>     {
> 
>         data = -2;
>     }
>     if(globalTrue)
>     {
>         if(data < 0)
>         {
> 
>             int result = data * 2;
>             printIntLine(result);
>         }
>     }
> }
> 
> 
> static void goodG2B2()
> {
>     int data;
> 
>     data = 0;
>     if(globalTrue)
>     {
> 
>         data = -2;
>     }
>     if(globalTrue)
>     {
>         if(data < 0)
>         {
> 
2836a2933,2940
> 
> void CWE191_Integer_Underflow__int_rand_multiply_10_good()
> {
>     goodB2G1();
>     goodB2G2();
>     goodG2B1();
>     goodG2B2();
> }
2846a2951,2953
>     printLine("Calling good()...");
>     CWE191_Integer_Underflow__int_rand_multiply_10_good();
>     printLine("Finished good()");
2852,2854d2958
<     printLine("Calling bad()...");
<     CWE191_Integer_Underflow__int_rand_multiply_10_bad();
<     printLine("Finished bad()");
