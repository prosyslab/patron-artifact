2826a2827,2843
> # 59 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__unsigned_int_min_sub_08.c"
> static void goodB2G1()
> {
>     unsigned int data;
>     data = 0;
>     if(staticReturnsTrue())
>     {
> 
>         data = 0;
>     }
>     if(staticReturnsFalse())
>     {
> 
>         printLine("Benign, fixed string");
>     }
>     else
>     {
2827a2845,2855
>         if (data > 0)
>         {
>             unsigned int result = data - 1;
>             printUnsignedLine(result);
>         }
>         else
>         {
>             printLine("data value is too large to perform subtraction.");
>         }
>     }
> }
2830c2858
< void CWE191_Integer_Underflow__unsigned_int_min_sub_08_bad()
---
> static void goodB2G2()
2840a2869,2898
> 
>         if (data > 0)
>         {
>             unsigned int result = data - 1;
>             printUnsignedLine(result);
>         }
>         else
>         {
>             printLine("data value is too large to perform subtraction.");
>         }
>     }
> }
> 
> 
> static void goodG2B1()
> {
>     unsigned int data;
>     data = 0;
>     if(staticReturnsFalse())
>     {
> 
>         printLine("Benign, fixed string");
>     }
>     else
>     {
> 
>         data = -2;
>     }
>     if(staticReturnsTrue())
>     {
2847a2906,2933
> 
> 
> static void goodG2B2()
> {
>     unsigned int data;
>     data = 0;
>     if(staticReturnsTrue())
>     {
> 
>         data = -2;
>     }
>     if(staticReturnsTrue())
>     {
>         {
> 
>             unsigned int result = data - 1;
>             printUnsignedLine(result);
>         }
>     }
> }
> 
> void CWE191_Integer_Underflow__unsigned_int_min_sub_08_good()
> {
>     goodB2G1();
>     goodB2G2();
>     goodG2B1();
>     goodG2B2();
> }
2857a2944,2946
>     printLine("Calling good()...");
>     CWE191_Integer_Underflow__unsigned_int_min_sub_08_good();
>     printLine("Finished good()");
2863,2865d2951
<     printLine("Calling bad()...");
<     CWE191_Integer_Underflow__unsigned_int_min_sub_08_bad();
<     printLine("Finished bad()");
