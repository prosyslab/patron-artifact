2826a2827,2833
> # 60 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__char_max_preinc_08.c"
> static void goodB2G1()
> {
>     char data;
>     data = ' ';
>     if(staticReturnsTrue())
>     {
2827a2835,2838
>         data = 0x7f;
>     }
>     if(staticReturnsFalse())
>     {
2828a2840,2843
>         printLine("Benign, fixed string");
>     }
>     else
>     {
2830c2845,2859
< void CWE190_Integer_Overflow__char_max_preinc_08_bad()
---
>         if (data < 0x7f)
>         {
>             ++data;
>             char result = data;
>             printHexCharLine(result);
>         }
>         else
>         {
>             printLine("data value is too large to perform arithmetic safely.");
>         }
>     }
> }
> 
> 
> static void goodB2G2()
2840a2870,2900
> 
>         if (data < 0x7f)
>         {
>             ++data;
>             char result = data;
>             printHexCharLine(result);
>         }
>         else
>         {
>             printLine("data value is too large to perform arithmetic safely.");
>         }
>     }
> }
> 
> 
> static void goodG2B1()
> {
>     char data;
>     data = ' ';
>     if(staticReturnsFalse())
>     {
> 
>         printLine("Benign, fixed string");
>     }
>     else
>     {
> 
>         data = 2;
>     }
>     if(staticReturnsTrue())
>     {
2848a2909,2937
> 
> 
> static void goodG2B2()
> {
>     char data;
>     data = ' ';
>     if(staticReturnsTrue())
>     {
> 
>         data = 2;
>     }
>     if(staticReturnsTrue())
>     {
>         {
> 
>             ++data;
>             char result = data;
>             printHexCharLine(result);
>         }
>     }
> }
> 
> void CWE190_Integer_Overflow__char_max_preinc_08_good()
> {
>     goodB2G1();
>     goodB2G2();
>     goodG2B1();
>     goodG2B2();
> }
2858a2948,2950
>     printLine("Calling good()...");
>     CWE190_Integer_Overflow__char_max_preinc_08_good();
>     printLine("Finished good()");
2864,2866d2955
<     printLine("Calling bad()...");
<     CWE190_Integer_Overflow__char_max_preinc_08_bad();
<     printLine("Finished bad()");
