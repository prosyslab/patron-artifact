2813a2814,2838
> # 59 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_rand_multiply_15.c"
> static void goodB2G1()
> {
>     short data;
>     data = 0;
>     switch(6)
>     {
>     case 6:
> 
>         data = (short)((int)(rand() & 1 ? (((unsigned)rand()<<30) ^ ((unsigned)rand()<<15) ^ rand()) : -(((unsigned)rand()<<30) ^ ((unsigned)rand()<<15) ^ rand()) - 1));
>         break;
>     default:
> 
>         printLine("Benign, fixed string");
>         break;
>     }
>     switch(8)
>     {
>     case 7:
> 
>         printLine("Benign, fixed string");
>         break;
>     default:
>         if(data < 0)
>         {
2814a2840,2856
>             if (data > (
> # 84 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_rand_multiply_15.c" 3 4
>                        (-0x7fff - 1)
> # 84 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_rand_multiply_15.c"
>                                /2))
>             {
>                 short result = data * 2;
>                 printIntLine(result);
>             }
>             else
>             {
>                 printLine("data value is too small to perform multiplication.");
>             }
>         }
>         break;
>     }
> }
2817c2859
< void CWE191_Integer_Underflow__short_rand_multiply_15_bad()
---
> static void goodB2G2()
2837a2880,2956
>             if (data > (
> # 120 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_rand_multiply_15.c" 3 4
>                        (-0x7fff - 1)
> # 120 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_rand_multiply_15.c"
>                                /2))
>             {
>                 short result = data * 2;
>                 printIntLine(result);
>             }
>             else
>             {
>                 printLine("data value is too small to perform multiplication.");
>             }
>         }
>         break;
>     default:
> 
>         printLine("Benign, fixed string");
>         break;
>     }
> }
> 
> 
> static void goodG2B1()
> {
>     short data;
>     data = 0;
>     switch(5)
>     {
>     case 6:
> 
>         printLine("Benign, fixed string");
>         break;
>     default:
> 
>         data = -2;
>         break;
>     }
>     switch(7)
>     {
>     case 7:
>         if(data < 0)
>         {
> 
>             short result = data * 2;
>             printIntLine(result);
>         }
>         break;
>     default:
> 
>         printLine("Benign, fixed string");
>         break;
>     }
> }
> 
> 
> static void goodG2B2()
> {
>     short data;
>     data = 0;
>     switch(6)
>     {
>     case 6:
> 
>         data = -2;
>         break;
>     default:
> 
>         printLine("Benign, fixed string");
>         break;
>     }
>     switch(7)
>     {
>     case 7:
>         if(data < 0)
>         {
> 
2847a2967,2974
> 
> void CWE191_Integer_Underflow__short_rand_multiply_15_good()
> {
>     goodB2G1();
>     goodB2G2();
>     goodG2B1();
>     goodG2B2();
> }
2857a2985,2987
>     printLine("Calling good()...");
>     CWE191_Integer_Underflow__short_rand_multiply_15_good();
>     printLine("Finished good()");
2863,2865d2992
<     printLine("Calling bad()...");
<     CWE191_Integer_Underflow__short_rand_multiply_15_bad();
<     printLine("Finished bad()");
