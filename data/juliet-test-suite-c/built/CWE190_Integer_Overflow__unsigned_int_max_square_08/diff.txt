3746a3747,3753
> # 61 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_08.c"
> static void goodB2G1()
> {
>     unsigned int data;
>     data = 0;
>     if(staticReturnsTrue())
>     {
3747a3755,3762
>         data = 
> # 68 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_08.c" 3 4
>               (0x7fffffff * 2U + 1U)
> # 68 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_08.c"
>                       ;
>     }
>     if(staticReturnsFalse())
>     {
3748a3764,3767
>         printLine("Benign, fixed string");
>     }
>     else
>     {
3750c3769,3786
< void CWE190_Integer_Overflow__unsigned_int_max_square_08_bad()
---
>         if (abs((long)data) < (long)sqrt((double)
> # 78 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_08.c" 3 4
>                                                 (0x7fffffff * 2U + 1U)
> # 78 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_08.c"
>                                                         ))
>         {
>             unsigned int result = data * data;
>             printUnsignedLine(result);
>         }
>         else
>         {
>             printLine("data value is too large to perform arithmetic safely.");
>         }
>     }
> }
> 
> 
> static void goodB2G2()
3758c3794
< # 44 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_08.c" 3 4
---
> # 98 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_08.c" 3 4
3760c3796
< # 44 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_08.c"
---
> # 98 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_08.c"
3764a3801,3854
> 
>         if (abs((long)data) < (long)sqrt((double)
> # 103 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_08.c" 3 4
>                                                 (0x7fffffff * 2U + 1U)
> # 103 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_08.c"
>                                                         ))
>         {
>             unsigned int result = data * data;
>             printUnsignedLine(result);
>         }
>         else
>         {
>             printLine("data value is too large to perform arithmetic safely.");
>         }
>     }
> }
> 
> 
> static void goodG2B1()
> {
>     unsigned int data;
>     data = 0;
>     if(staticReturnsFalse())
>     {
> 
>         printLine("Benign, fixed string");
>     }
>     else
>     {
> 
>         data = 2;
>     }
>     if(staticReturnsTrue())
>     {
>         {
> 
>             unsigned int result = data * data;
>             printUnsignedLine(result);
>         }
>     }
> }
> 
> 
> static void goodG2B2()
> {
>     unsigned int data;
>     data = 0;
>     if(staticReturnsTrue())
>     {
> 
>         data = 2;
>     }
>     if(staticReturnsTrue())
>     {
3771a3862,3869
> 
> void CWE190_Integer_Overflow__unsigned_int_max_square_08_good()
> {
>     goodB2G1();
>     goodB2G2();
>     goodG2B1();
>     goodG2B2();
> }
3781a3880,3882
>     printLine("Calling good()...");
>     CWE190_Integer_Overflow__unsigned_int_max_square_08_good();
>     printLine("Finished good()");
3787,3789d3887
<     printLine("Calling bad()...");
<     CWE190_Integer_Overflow__unsigned_int_max_square_08_bad();
<     printLine("Finished bad()");
