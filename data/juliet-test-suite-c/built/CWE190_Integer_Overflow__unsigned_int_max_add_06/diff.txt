2818a2819,2825
> # 51 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_add_06.c"
> static void goodB2G1()
> {
>     unsigned int data;
>     data = 0;
>     if(STATIC_CONST_FIVE==5)
>     {
2819a2827,2834
>         data = 
> # 58 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_add_06.c" 3 4
>               (0x7fffffff * 2U + 1U)
> # 58 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_add_06.c"
>                       ;
>     }
>     if(STATIC_CONST_FIVE!=5)
>     {
2820a2836,2839
>         printLine("Benign, fixed string");
>     }
>     else
>     {
2822c2841,2858
< void CWE190_Integer_Overflow__unsigned_int_max_add_06_bad()
---
>         if (data < 
> # 68 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_add_06.c" 3 4
>                   (0x7fffffff * 2U + 1U)
> # 68 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_add_06.c"
>                           )
>         {
>             unsigned int result = data + 1;
>             printUnsignedLine(result);
>         }
>         else
>         {
>             printLine("data value is too large to perform arithmetic safely.");
>         }
>     }
> }
> 
> 
> static void goodB2G2()
2830c2866
< # 34 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_add_06.c" 3 4
---
> # 88 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_add_06.c" 3 4
2832c2868
< # 34 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_add_06.c"
---
> # 88 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_add_06.c"
2836a2873,2926
> 
>         if (data < 
> # 93 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_add_06.c" 3 4
>                   (0x7fffffff * 2U + 1U)
> # 93 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_add_06.c"
>                           )
>         {
>             unsigned int result = data + 1;
>             printUnsignedLine(result);
>         }
>         else
>         {
>             printLine("data value is too large to perform arithmetic safely.");
>         }
>     }
> }
> 
> 
> static void goodG2B1()
> {
>     unsigned int data;
>     data = 0;
>     if(STATIC_CONST_FIVE!=5)
>     {
> 
>         printLine("Benign, fixed string");
>     }
>     else
>     {
> 
>         data = 2;
>     }
>     if(STATIC_CONST_FIVE==5)
>     {
>         {
> 
>             unsigned int result = data + 1;
>             printUnsignedLine(result);
>         }
>     }
> }
> 
> 
> static void goodG2B2()
> {
>     unsigned int data;
>     data = 0;
>     if(STATIC_CONST_FIVE==5)
>     {
> 
>         data = 2;
>     }
>     if(STATIC_CONST_FIVE==5)
>     {
2843a2934,2941
> 
> void CWE190_Integer_Overflow__unsigned_int_max_add_06_good()
> {
>     goodB2G1();
>     goodB2G2();
>     goodG2B1();
>     goodG2B2();
> }
2853a2952,2954
>     printLine("Calling good()...");
>     CWE190_Integer_Overflow__unsigned_int_max_add_06_good();
>     printLine("Finished good()");
2859,2861d2959
<     printLine("Calling bad()...");
<     CWE190_Integer_Overflow__unsigned_int_max_add_06_bad();
<     printLine("Finished bad()");
