3731a3732
> # 48 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_03.c"
3732a3734,3750
> # 48 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_03.c"
> static void goodB2G1()
> {
>     unsigned int data;
>     data = 0;
>     if(5==5)
>     {
> 
>         data = (unsigned int)((int)(rand() & 1 ? (((unsigned)rand()<<30) ^ ((unsigned)rand()<<15) ^ rand()) : -(((unsigned)rand()<<30) ^ ((unsigned)rand()<<15) ^ rand()) - 1));
>     }
>     if(5!=5)
>     {
> 
>         printLine("Benign, fixed string");
>     }
>     else
>     {
3733a3752,3766
>         if (abs((long)data) < (long)sqrt((double)
> # 65 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_03.c" 3 4
>                                                 (0x7fffffff * 2U + 1U)
> # 65 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_03.c"
>                                                         ))
>         {
>             unsigned int result = data * data;
>             printUnsignedLine(result);
>         }
>         else
>         {
>             printLine("data value is too large to perform arithmetic safely.");
>         }
>     }
> }
3736,3737c3769
< # 24 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_03.c"
< void CWE190_Integer_Overflow__unsigned_int_rand_square_03_bad()
---
> static void goodB2G2()
3747a3780,3813
> 
>         if (abs((long)data) < (long)sqrt((double)
> # 90 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_03.c" 3 4
>                                                 (0x7fffffff * 2U + 1U)
> # 90 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_03.c"
>                                                         ))
>         {
>             unsigned int result = data * data;
>             printUnsignedLine(result);
>         }
>         else
>         {
>             printLine("data value is too large to perform arithmetic safely.");
>         }
>     }
> }
> 
> 
> static void goodG2B1()
> {
>     unsigned int data;
>     data = 0;
>     if(5!=5)
>     {
> 
>         printLine("Benign, fixed string");
>     }
>     else
>     {
> 
>         data = 2;
>     }
>     if(5==5)
>     {
3754a3821,3848
> 
> 
> static void goodG2B2()
> {
>     unsigned int data;
>     data = 0;
>     if(5==5)
>     {
> 
>         data = 2;
>     }
>     if(5==5)
>     {
>         {
> 
>             unsigned int result = data * data;
>             printUnsignedLine(result);
>         }
>     }
> }
> 
> void CWE190_Integer_Overflow__unsigned_int_rand_square_03_good()
> {
>     goodB2G1();
>     goodB2G2();
>     goodG2B1();
>     goodG2B2();
> }
3764a3859,3861
>     printLine("Calling good()...");
>     CWE190_Integer_Overflow__unsigned_int_rand_square_03_good();
>     printLine("Finished good()");
3770,3772d3866
<     printLine("Calling bad()...");
<     CWE190_Integer_Overflow__unsigned_int_rand_square_03_bad();
<     printLine("Finished bad()");
