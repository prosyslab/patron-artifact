2813a2814,2852
> # 86 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15.c"
> static void goodB2G1()
> {
>     int data;
> 
>     data = -1;
>     switch(6)
>     {
>     case 6:
>     {
>         char inputBuffer[(3 * sizeof(data) + 2)] = "";
> 
>         if (fgets(inputBuffer, (3 * sizeof(data) + 2), 
> # 97 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15.c" 3 4
>                                                stdin
> # 97 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15.c"
>                                                     ) != 
> # 97 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15.c" 3 4
>                                                          ((void *)0)
> # 97 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15.c"
>                                                              )
>         {
> 
>             data = atoi(inputBuffer);
>         }
>         else
>         {
>             printLine("fgets() failed.");
>         }
>     }
>     break;
>     default:
> 
>         printLine("Benign, fixed string");
>         break;
>     }
>     switch(8)
>     {
>     case 7:
2814a2854,2859
>         printLine("Benign, fixed string");
>         break;
>     default:
>     {
>         int i;
>         int buffer[10] = { 0 };
2815a2861,2863
>         if (data >= 0 && data < (10))
>         {
>             buffer[data] = 1;
2816a2865,2877
>             for(i = 0; i < 10; i++)
>             {
>                 printIntLine(buffer[i]);
>             }
>         }
>         else
>         {
>             printLine("ERROR: Array index is out-of-bounds");
>         }
>     }
>     break;
>     }
> }
2819c2880
< void CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15_bad()
---
> static void goodB2G2()
2831c2892
< # 35 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15.c" 3 4
---
> # 154 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15.c" 3 4
2833c2894
< # 35 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15.c"
---
> # 154 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15.c"
2835c2896
< # 35 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15.c" 3 4
---
> # 154 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15.c" 3 4
2837c2898
< # 35 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15.c"
---
> # 154 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15.c"
2860a2922,2968
>         if (data >= 0 && data < (10))
>         {
>             buffer[data] = 1;
> 
>             for(i = 0; i < 10; i++)
>             {
>                 printIntLine(buffer[i]);
>             }
>         }
>         else
>         {
>             printLine("ERROR: Array index is out-of-bounds");
>         }
>     }
>     break;
>     default:
> 
>         printLine("Benign, fixed string");
>         break;
>     }
> }
> 
> 
> static void goodG2B1()
> {
>     int data;
> 
>     data = -1;
>     switch(5)
>     {
>     case 6:
> 
>         printLine("Benign, fixed string");
>         break;
>     default:
> 
> 
>         data = 7;
>         break;
>     }
>     switch(7)
>     {
>     case 7:
>     {
>         int i;
>         int buffer[10] = { 0 };
> 
2882a2991,3046
> 
> 
> static void goodG2B2()
> {
>     int data;
> 
>     data = -1;
>     switch(6)
>     {
>     case 6:
> 
> 
>         data = 7;
>         break;
>     default:
> 
>         printLine("Benign, fixed string");
>         break;
>     }
>     switch(7)
>     {
>     case 7:
>     {
>         int i;
>         int buffer[10] = { 0 };
> 
> 
>         if (data >= 0)
>         {
>             buffer[data] = 1;
> 
>             for(i = 0; i < 10; i++)
>             {
>                 printIntLine(buffer[i]);
>             }
>         }
>         else
>         {
>             printLine("ERROR: Array index is negative.");
>         }
>     }
>     break;
>     default:
> 
>         printLine("Benign, fixed string");
>         break;
>     }
> }
> 
> void CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15_good()
> {
>     goodB2G1();
>     goodB2G2();
>     goodG2B1();
>     goodG2B2();
> }
2892a3057,3059
>     printLine("Calling good()...");
>     CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15_good();
>     printLine("Finished good()");
2898,2900d3064
<     printLine("Calling bad()...");
<     CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15_bad();
<     printLine("Finished bad()");
