5816c5816
< # 46 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c"
---
> # 150 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c"
5818,5819c5818,5819
< # 46 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c"
< void CWE369_Divide_by_Zero__float_listenSocket_15_bad()
---
> # 150 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c"
> static void goodB2G1()
5847c5847
< # 73 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c" 3 4
---
> # 177 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c" 3 4
5849c5849
< # 73 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c"
---
> # 177 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c"
5851c5851
< # 73 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c" 3 4
---
> # 177 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c" 3 4
5853c5853
< # 73 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c"
---
> # 177 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c"
5855c5855
< # 73 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c" 3 4
---
> # 177 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c" 3 4
5857c5857
< # 73 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c"
---
> # 177 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c"
5865c5865
< # 79 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c" 3 4
---
> # 183 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c" 3 4
5867c5867
< # 79 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c"
---
> # 183 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c"
5870c5870
< # 80 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c" 3 4
---
> # 184 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c" 3 4
5872c5872
< # 80 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c"
---
> # 184 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c"
5884c5884
< # 90 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c" 3 4
---
> # 194 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c" 3 4
5886c5886
< # 90 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c"
---
> # 194 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c"
5888c5888
< # 90 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c" 3 4
---
> # 194 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c" 3 4
5890c5890
< # 90 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c"
---
> # 194 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c"
5929a5930,6133
>     switch(8)
>     {
>     case 7:
> 
>         printLine("Benign, fixed string");
>         break;
>     default:
> 
>         if(fabs(data) > 0.000001)
>         {
>             int result = (int)(100.0 / data);
>             printIntLine(result);
>         }
>         else
>         {
>             printLine("This would result in a divide by zero");
>         }
>         break;
>     }
> }
> 
> 
> static void goodB2G2()
> {
>     float data;
> 
>     data = 0.0F;
>     switch(6)
>     {
>     case 6:
>     {
> 
> 
> 
> 
>         int recvResult;
>         struct sockaddr_in service;
>         int listenSocket = -1;
>         int acceptSocket = -1;
>         char inputBuffer[20];
>         do
>         {
> 
> 
> 
> 
> 
> 
> 
>             listenSocket = socket(
> # 282 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c" 3 4
>                                  2
> # 282 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c"
>                                         , 
> # 282 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c" 3 4
>                                           SOCK_STREAM
> # 282 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c"
>                                                      , 
> # 282 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c" 3 4
>                                                        IPPROTO_TCP
> # 282 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c"
>                                                                   );
>             if (listenSocket == -1)
>             {
>                 break;
>             }
>             memset(&service, 0, sizeof(service));
>             service.sin_family = 
> # 288 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c" 3 4
>                                 2
> # 288 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c"
>                                        ;
>             service.sin_addr.s_addr = 
> # 289 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c" 3 4
>                                      ((in_addr_t) 0x00000000)
> # 289 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c"
>                                                ;
>             service.sin_port = htons(27015);
>             if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == -1)
>             {
>                 break;
>             }
>             if (listen(listenSocket, 5) == -1)
>             {
>                 break;
>             }
>             acceptSocket = accept(listenSocket, 
> # 299 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c" 3 4
>                                                ((void *)0)
> # 299 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c"
>                                                    , 
> # 299 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c" 3 4
>                                                      ((void *)0)
> # 299 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_15.c"
>                                                          );
>             if (acceptSocket == -1)
>             {
>                 break;
>             }
> 
> 
>             recvResult = recv(acceptSocket, inputBuffer, 20 - 1, 0);
>             if (recvResult == -1 || recvResult == 0)
>             {
>                 break;
>             }
> 
>             inputBuffer[recvResult] = '\0';
> 
>             data = (float)atof(inputBuffer);
>         }
>         while (0);
>         if (listenSocket != -1)
>         {
>             close(listenSocket);
>         }
>         if (acceptSocket != -1)
>         {
>             close(acceptSocket);
>         }
> 
> 
> 
> 
> 
> 
>     }
>     break;
>     default:
> 
>         printLine("Benign, fixed string");
>         break;
>     }
>     switch(7)
>     {
>     case 7:
> 
>         if(fabs(data) > 0.000001)
>         {
>             int result = (int)(100.0 / data);
>             printIntLine(result);
>         }
>         else
>         {
>             printLine("This would result in a divide by zero");
>         }
>         break;
>     default:
> 
>         printLine("Benign, fixed string");
>         break;
>     }
> }
> 
> 
> static void goodG2B1()
> {
>     float data;
> 
>     data = 0.0F;
>     switch(5)
>     {
>     case 6:
> 
>         printLine("Benign, fixed string");
>         break;
>     default:
> 
>         data = 2.0F;
>         break;
>     }
>     switch(7)
>     {
>     case 7:
>     {
> 
>         int result = (int)(100.0 / data);
>         printIntLine(result);
>     }
>     break;
>     default:
> 
>         printLine("Benign, fixed string");
>         break;
>     }
> }
> 
> 
> static void goodG2B2()
> {
>     float data;
> 
>     data = 0.0F;
>     switch(6)
>     {
>     case 6:
> 
>         data = 2.0F;
>         break;
>     default:
> 
>         printLine("Benign, fixed string");
>         break;
>     }
5944a6149,6156
> 
> void CWE369_Divide_by_Zero__float_listenSocket_15_good()
> {
>     goodB2G1();
>     goodB2G2();
>     goodG2B1();
>     goodG2B2();
> }
5954a6167,6169
>     printLine("Calling good()...");
>     CWE369_Divide_by_Zero__float_listenSocket_15_good();
>     printLine("Finished good()");
5960,5962d6174
<     printLine("Calling bad()...");
<     CWE369_Divide_by_Zero__float_listenSocket_15_bad();
<     printLine("Finished bad()");
