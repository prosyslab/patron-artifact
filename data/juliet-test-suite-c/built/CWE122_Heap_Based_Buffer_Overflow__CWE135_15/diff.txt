3239a3240
> # 70 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c"
3240a3242,3279
> # 70 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c"
> static void goodB2G1()
> {
>     void * data;
>     data = 
> # 73 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c" 3 4
>           ((void *)0)
> # 73 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c"
>               ;
>     switch(6)
>     {
>     case 6:
>     {
>         wchar_t * dataBadBuffer = (wchar_t *)malloc(50*sizeof(wchar_t));
>         if (dataBadBuffer == 
> # 79 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c" 3 4
>                             ((void *)0)
> # 79 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c"
>                                 ) {exit(-1);}
>         wmemset(dataBadBuffer, L'A', 50-1);
>         dataBadBuffer[50-1] = L'\0';
> 
>         data = (void *)dataBadBuffer;
>     }
>     break;
>     default:
> 
>         printLine("Benign, fixed string");
>         break;
>     }
>     switch(8)
>     {
>     case 7:
> 
>         printLine("Benign, fixed string");
>         break;
>     default:
>     {
3241a3281,3294
>         size_t dataLen = wcslen((wchar_t *)data);
>         void * dest = (void *)calloc(dataLen+1, sizeof(wchar_t));
>         if (dest == 
> # 102 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c" 3 4
>                    ((void *)0)
> # 102 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c"
>                        ) {exit(-1);}
>         (void)wcscpy(dest, data);
>         printWLine((wchar_t *)dest);
>         free(dest);
>     }
>     break;
>     }
> }
3244,3245c3297
< # 24 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c"
< void CWE122_Heap_Based_Buffer_Overflow__CWE135_15_bad()
---
> static void goodB2G2()
3249c3301
< # 27 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c" 3 4
---
> # 115 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c" 3 4
3251c3303
< # 27 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c"
---
> # 115 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c"
3259c3311
< # 33 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c" 3 4
---
> # 121 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c" 3 4
3261c3313
< # 33 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c"
---
> # 121 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c"
3279c3331
<         size_t dataLen = strlen((char *)data);
---
>         size_t dataLen = wcslen((wchar_t *)data);
3282c3334
< # 52 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c" 3 4
---
> # 140 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c" 3 4
3284c3336
< # 52 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c"
---
> # 140 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c"
3286a3339,3392
>         printWLine((wchar_t *)dest);
>         free(dest);
>     }
>     break;
>     default:
> 
>         printLine("Benign, fixed string");
>         break;
>     }
> }
> 
> 
> static void goodG2B1()
> {
>     void * data;
>     data = 
> # 157 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c" 3 4
>           ((void *)0)
> # 157 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c"
>               ;
>     switch(5)
>     {
>     case 6:
> 
>         printLine("Benign, fixed string");
>         break;
>     default:
>     {
>         char * dataGoodBuffer = (char *)malloc(50*sizeof(char));
>         if (dataGoodBuffer == 
> # 167 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c" 3 4
>                              ((void *)0)
> # 167 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c"
>                                  ) {exit(-1);}
>         memset(dataGoodBuffer, 'A', 50-1);
>         dataGoodBuffer[50-1] = '\0';
> 
>         data = (void *)dataGoodBuffer;
>     }
>     break;
>     }
>     switch(7)
>     {
>     case 7:
>     {
> 
>         size_t dataLen = strlen((char *)data);
>         void * dest = (void *)calloc(dataLen+1, 1);
>         if (dest == 
> # 182 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c" 3 4
>                    ((void *)0)
> # 182 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c"
>                        ) {exit(-1);}
>         (void)strcpy(dest, data);
3296a3403,3464
> 
> 
> static void goodG2B2()
> {
>     void * data;
>     data = 
> # 199 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c" 3 4
>           ((void *)0)
> # 199 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c"
>               ;
>     switch(6)
>     {
>     case 6:
>     {
>         char * dataGoodBuffer = (char *)malloc(50*sizeof(char));
>         if (dataGoodBuffer == 
> # 205 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c" 3 4
>                              ((void *)0)
> # 205 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c"
>                                  ) {exit(-1);}
>         memset(dataGoodBuffer, 'A', 50-1);
>         dataGoodBuffer[50-1] = '\0';
> 
>         data = (void *)dataGoodBuffer;
>     }
>     break;
>     default:
> 
>         printLine("Benign, fixed string");
>         break;
>     }
>     switch(7)
>     {
>     case 7:
>     {
> 
>         size_t dataLen = strlen((char *)data);
>         void * dest = (void *)calloc(dataLen+1, 1);
>         if (dest == 
> # 224 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c" 3 4
>                    ((void *)0)
> # 224 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c"
>                        ) {exit(-1);}
>         (void)strcpy(dest, data);
>         printLine((char *)dest);
>         free(dest);
>     }
>     break;
>     default:
> 
>         printLine("Benign, fixed string");
>         break;
>     }
> }
> 
> void CWE122_Heap_Based_Buffer_Overflow__CWE135_15_good()
> {
>     goodB2G1();
>     goodB2G2();
>     goodG2B1();
>     goodG2B2();
> }
3306a3475,3477
>     printLine("Calling good()...");
>     CWE122_Heap_Based_Buffer_Overflow__CWE135_15_good();
>     printLine("Finished good()");
3312,3314d3482
<     printLine("Calling bad()...");
<     CWE122_Heap_Based_Buffer_Overflow__CWE135_15_bad();
<     printLine("Finished bad()");
