2813a2814,2817
> # 74 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_10.c"
> static void goodB2G1()
> {
>     int data;
2814a2819,2823
>     data = -1;
>     if(globalTrue)
>     {
>         {
>             char inputBuffer[(3 * sizeof(data) + 2)] = "";
2815a2825,2834
>             if (fgets(inputBuffer, (3 * sizeof(data) + 2), 
> # 84 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_10.c" 3 4
>                                                    stdin
> # 84 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_10.c"
>                                                         ) != 
> # 84 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_10.c" 3 4
>                                                              ((void *)0)
> # 84 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_10.c"
>                                                                  )
>             {
2816a2836,2845
>                 data = atoi(inputBuffer);
>             }
>             else
>             {
>                 printLine("fgets() failed.");
>             }
>         }
>     }
>     if(globalFalse)
>     {
2817a2847,2853
>         printLine("Benign, fixed string");
>     }
>     else
>     {
>         {
>             int i;
>             int buffer[10] = { 0 };
2819c2855,2873
< void CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_10_bad()
---
>             if (data >= 0 && data < (10))
>             {
>                 buffer[data] = 1;
> 
>                 for(i = 0; i < 10; i++)
>                 {
>                     printIntLine(buffer[i]);
>                 }
>             }
>             else
>             {
>                 printLine("ERROR: Array index is out-of-bounds");
>             }
>         }
>     }
> }
> 
> 
> static void goodB2G2()
2830c2884
< # 34 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_10.c" 3 4
---
> # 134 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_10.c" 3 4
2832c2886
< # 34 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_10.c"
---
> # 134 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_10.c"
2834c2888
< # 34 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_10.c" 3 4
---
> # 134 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_10.c" 3 4
2836c2890
< # 34 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_10.c"
---
> # 134 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_10.c"
2853a2908,2983
>             if (data >= 0 && data < (10))
>             {
>                 buffer[data] = 1;
> 
>                 for(i = 0; i < 10; i++)
>                 {
>                     printIntLine(buffer[i]);
>                 }
>             }
>             else
>             {
>                 printLine("ERROR: Array index is out-of-bounds");
>             }
>         }
>     }
> }
> 
> 
> static void goodG2B1()
> {
>     int data;
> 
>     data = -1;
>     if(globalFalse)
>     {
> 
>         printLine("Benign, fixed string");
>     }
>     else
>     {
> 
> 
>         data = 7;
>     }
>     if(globalTrue)
>     {
>         {
>             int i;
>             int buffer[10] = { 0 };
> 
> 
>             if (data >= 0)
>             {
>                 buffer[data] = 1;
> 
>                 for(i = 0; i < 10; i++)
>                 {
>                     printIntLine(buffer[i]);
>                 }
>             }
>             else
>             {
>                 printLine("ERROR: Array index is negative.");
>             }
>         }
>     }
> }
> 
> 
> static void goodG2B2()
> {
>     int data;
> 
>     data = -1;
>     if(globalTrue)
>     {
> 
> 
>         data = 7;
>     }
>     if(globalTrue)
>     {
>         {
>             int i;
>             int buffer[10] = { 0 };
> 
2870a3001,3008
> 
> void CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_10_good()
> {
>     goodB2G1();
>     goodB2G2();
>     goodG2B1();
>     goodG2B2();
> }
2880a3019,3021
>     printLine("Calling good()...");
>     CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_10_good();
>     printLine("Finished good()");
2886,2888d3026
<     printLine("Calling bad()...");
<     CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_10_bad();
<     printLine("Finished bad()");
