4904a4905,4954
> # 143 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c"
> static void goodB2G1()
> {
>     int data;
> 
>     data = -1;
>     if(STATIC_CONST_TRUE)
>     {
>         {
> 
> 
> 
> 
>             int recvResult;
>             struct sockaddr_in service;
>             int connectSocket = -1;
>             char inputBuffer[(3 * sizeof(data) + 2)];
>             do
>             {
> # 169 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c"
>                 connectSocket = socket(
> # 169 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c" 3 4
>                                       2
> # 169 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c"
>                                              , 
> # 169 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c" 3 4
>                                                SOCK_STREAM
> # 169 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c"
>                                                           , 
> # 169 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c" 3 4
>                                                             IPPROTO_TCP
> # 169 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c"
>                                                                        );
>                 if (connectSocket == -1)
>                 {
>                     break;
>                 }
>                 memset(&service, 0, sizeof(service));
>                 service.sin_family = 
> # 175 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c" 3 4
>                                     2
> # 175 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c"
>                                            ;
>                 service.sin_addr.s_addr = inet_addr("127.0.0.1");
>                 service.sin_port = htons(27015);
>                 if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == -1)
>                 {
>                     break;
>                 }
> 
4905a4956,5005
>                 recvResult = recv(connectSocket, inputBuffer, (3 * sizeof(data) + 2) - 1, 0);
>                 if (recvResult == -1 || recvResult == 0)
>                 {
>                     break;
>                 }
> 
>                 inputBuffer[recvResult] = '\0';
> 
>                 data = atoi(inputBuffer);
>             }
>             while (0);
>             if (connectSocket != -1)
>             {
>                 close(connectSocket);
>             }
> 
> 
> 
> 
> 
> 
>         }
>     }
>     if(STATIC_CONST_FALSE)
>     {
> 
>         printLine("Benign, fixed string");
>     }
>     else
>     {
>         {
>             int i;
>             int buffer[10] = { 0 };
> 
>             if (data >= 0 && data < (10))
>             {
>                 buffer[data] = 1;
> 
>                 for(i = 0; i < 10; i++)
>                 {
>                     printIntLine(buffer[i]);
>                 }
>             }
>             else
>             {
>                 printLine("ERROR: Array index is out-of-bounds");
>             }
>         }
>     }
> }
4908c5008
< void CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04_bad()
---
> static void goodB2G2()
4926c5026
< # 76 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c"
---
> # 262 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c"
4928c5028
< # 76 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c" 3 4
---
> # 262 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c" 3 4
4930c5030
< # 76 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c"
---
> # 262 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c"
4932c5032
< # 76 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c" 3 4
---
> # 262 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c" 3 4
4934c5034
< # 76 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c"
---
> # 262 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c"
4936c5036
< # 76 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c" 3 4
---
> # 262 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c" 3 4
4938c5038
< # 76 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c"
---
> # 262 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c"
4946c5046
< # 82 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c" 3 4
---
> # 268 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c" 3 4
4948c5048
< # 82 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c"
---
> # 268 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c"
4986a5087,5162
>             if (data >= 0 && data < (10))
>             {
>                 buffer[data] = 1;
> 
>                 for(i = 0; i < 10; i++)
>                 {
>                     printIntLine(buffer[i]);
>                 }
>             }
>             else
>             {
>                 printLine("ERROR: Array index is out-of-bounds");
>             }
>         }
>     }
> }
> 
> 
> static void goodG2B1()
> {
>     int data;
> 
>     data = -1;
>     if(STATIC_CONST_FALSE)
>     {
> 
>         printLine("Benign, fixed string");
>     }
>     else
>     {
> 
> 
>         data = 7;
>     }
>     if(STATIC_CONST_TRUE)
>     {
>         {
>             int i;
>             int buffer[10] = { 0 };
> 
> 
>             if (data >= 0)
>             {
>                 buffer[data] = 1;
> 
>                 for(i = 0; i < 10; i++)
>                 {
>                     printIntLine(buffer[i]);
>                 }
>             }
>             else
>             {
>                 printLine("ERROR: Array index is negative.");
>             }
>         }
>     }
> }
> 
> 
> static void goodG2B2()
> {
>     int data;
> 
>     data = -1;
>     if(STATIC_CONST_TRUE)
>     {
> 
> 
>         data = 7;
>     }
>     if(STATIC_CONST_TRUE)
>     {
>         {
>             int i;
>             int buffer[10] = { 0 };
> 
5003a5180,5187
> 
> void CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04_good()
> {
>     goodB2G1();
>     goodB2G2();
>     goodG2B1();
>     goodG2B2();
> }
5013a5198,5200
>     printLine("Calling good()...");
>     CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04_good();
>     printLine("Finished good()");
5019,5021d5205
<     printLine("Calling bad()...");
<     CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04_bad();
<     printLine("Finished bad()");
