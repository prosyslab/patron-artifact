3241c3241
< # 30 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c"
---
> # 92 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c"
3243,3244c3243,3244
< # 30 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c"
< void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15_bad()
---
> # 92 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c"
> static void goodB2G1()
3256c3256
< # 41 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c" 3 4
---
> # 103 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c" 3 4
3258c3258
< # 41 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c"
---
> # 103 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c"
3260c3260
< # 41 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c" 3 4
---
> # 103 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c" 3 4
3262c3262
< # 41 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c"
---
> # 103 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c"
3267c3267
< # 44 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c" 3 4
---
> # 106 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c" 3 4
3269c3269
< # 44 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c"
---
> # 106 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c"
3282a3283,3458
>     switch(8)
>     {
>     case 7:
> 
>         printLine("Benign, fixed string");
>         break;
>     default:
>     {
>         char * myString;
> 
> 
> 
>         if (data > strlen("hello") && data < 100)
>         {
>             myString = (char *)malloc(data*sizeof(char));
>             if (myString == 
> # 134 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c" 3 4
>                            ((void *)0)
> # 134 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c"
>                                ) {exit(-1);}
> 
>             strcpy(myString, "hello");
>             printLine(myString);
>             free(myString);
>         }
>         else
>         {
>             printLine("Input is less than the length of the source string or too large");
>         }
>     }
>     break;
>     }
> }
> 
> 
> static void goodB2G2()
> {
>     size_t data;
> 
>     data = 0;
>     switch(6)
>     {
>     case 6:
>     {
>         char inputBuffer[(3 * sizeof(data) + 2)] = "";
> 
>         if (fgets(inputBuffer, (3 * sizeof(data) + 2), 
> # 161 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c" 3 4
>                                                stdin
> # 161 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c"
>                                                     ) != 
> # 161 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c" 3 4
>                                                          ((void *)0)
> # 161 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c"
>                                                              )
>         {
> 
>             data = strtoul(inputBuffer, 
> # 164 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c" 3 4
>                                        ((void *)0)
> # 164 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c"
>                                            , 0);
>         }
>         else
>         {
>             printLine("fgets() failed.");
>         }
>     }
>     break;
>     default:
> 
>         printLine("Benign, fixed string");
>         break;
>     }
>     switch(7)
>     {
>     case 7:
>     {
>         char * myString;
> 
> 
> 
>         if (data > strlen("hello") && data < 100)
>         {
>             myString = (char *)malloc(data*sizeof(char));
>             if (myString == 
> # 188 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c" 3 4
>                            ((void *)0)
> # 188 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c"
>                                ) {exit(-1);}
> 
>             strcpy(myString, "hello");
>             printLine(myString);
>             free(myString);
>         }
>         else
>         {
>             printLine("Input is less than the length of the source string or too large");
>         }
>     }
>     break;
>     default:
> 
>         printLine("Benign, fixed string");
>         break;
>     }
> }
> 
> 
> static void goodG2B1()
> {
>     size_t data;
> 
>     data = 0;
>     switch(5)
>     {
>     case 6:
> 
>         printLine("Benign, fixed string");
>         break;
>     default:
> 
>         data = 20;
>         break;
>     }
>     switch(7)
>     {
>     case 7:
>     {
>         char * myString;
> 
> 
> 
>         if (data > strlen("hello"))
>         {
>             myString = (char *)malloc(data*sizeof(char));
>             if (myString == 
> # 235 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c" 3 4
>                            ((void *)0)
> # 235 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c"
>                                ) {exit(-1);}
> 
>             strcpy(myString, "hello");
>             printLine(myString);
>             free(myString);
>         }
>         else
>         {
>             printLine("Input is less than the length of the source string");
>         }
>     }
>     break;
>     default:
> 
>         printLine("Benign, fixed string");
>         break;
>     }
> }
> 
> 
> static void goodG2B2()
> {
>     size_t data;
> 
>     data = 0;
>     switch(6)
>     {
>     case 6:
> 
>         data = 20;
>         break;
>     default:
> 
>         printLine("Benign, fixed string");
>         break;
>     }
3295c3471
< # 68 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c" 3 4
---
> # 282 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c" 3 4
3297c3473
< # 68 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c"
---
> # 282 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15.c"
3315a3492,3499
> 
> void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15_good()
> {
>     goodB2G1();
>     goodB2G2();
>     goodG2B1();
>     goodG2B2();
> }
3325a3510,3512
>     printLine("Calling good()...");
>     CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15_good();
>     printLine("Finished good()");
3331,3333d3517
<     printLine("Calling bad()...");
<     CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_15_bad();
<     printLine("Finished bad()");
