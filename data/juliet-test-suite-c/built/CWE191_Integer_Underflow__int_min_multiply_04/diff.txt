2819a2820,2843
> # 54 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_multiply_04.c"
> static void goodB2G1()
> {
>     int data;
> 
>     data = 0;
>     if(STATIC_CONST_TRUE)
>     {
> 
>         data = 
> # 62 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_multiply_04.c" 3 4
>               (-0x7fffffff - 1)
> # 62 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_multiply_04.c"
>                      ;
>     }
>     if(STATIC_CONST_FALSE)
>     {
> 
>         printLine("Benign, fixed string");
>     }
>     else
>     {
>         if(data < 0)
>         {
2820a2845,2860
>             if (data > (
> # 74 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_multiply_04.c" 3 4
>                        (-0x7fffffff - 1)
> # 74 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_multiply_04.c"
>                               /2))
>             {
>                 int result = data * 2;
>                 printIntLine(result);
>             }
>             else
>             {
>                 printLine("data value is too small to perform multiplication.");
>             }
>         }
>     }
> }
2823c2863
< void CWE191_Integer_Underflow__int_min_multiply_04_bad()
---
> static void goodB2G2()
2832c2872
< # 36 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_multiply_04.c" 3 4
---
> # 96 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_multiply_04.c" 3 4
2834c2874
< # 36 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_multiply_04.c"
---
> # 96 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_multiply_04.c"
2841a2882,2919
>             if (data > (
> # 103 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_multiply_04.c" 3 4
>                        (-0x7fffffff - 1)
> # 103 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_min_multiply_04.c"
>                               /2))
>             {
>                 int result = data * 2;
>                 printIntLine(result);
>             }
>             else
>             {
>                 printLine("data value is too small to perform multiplication.");
>             }
>         }
>     }
> }
> 
> 
> static void goodG2B1()
> {
>     int data;
> 
>     data = 0;
>     if(STATIC_CONST_FALSE)
>     {
> 
>         printLine("Benign, fixed string");
>     }
>     else
>     {
> 
>         data = -2;
>     }
>     if(STATIC_CONST_TRUE)
>     {
>         if(data < 0)
>         {
> 
2846a2925,2954
> 
> 
> static void goodG2B2()
> {
>     int data;
> 
>     data = 0;
>     if(STATIC_CONST_TRUE)
>     {
> 
>         data = -2;
>     }
>     if(STATIC_CONST_TRUE)
>     {
>         if(data < 0)
>         {
> 
>             int result = data * 2;
>             printIntLine(result);
>         }
>     }
> }
> 
> void CWE191_Integer_Underflow__int_min_multiply_04_good()
> {
>     goodB2G1();
>     goodB2G2();
>     goodG2B1();
>     goodG2B2();
> }
2856a2965,2967
>     printLine("Calling good()...");
>     CWE191_Integer_Underflow__int_min_multiply_04_good();
>     printLine("Finished good()");
2862,2864d2972
<     printLine("Calling bad()...");
<     CWE191_Integer_Underflow__int_min_multiply_04_bad();
<     printLine("Finished bad()");
