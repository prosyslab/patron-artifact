2813a2814,2845
> # 80 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_15.c"
> static void goodB2G1()
> {
>     int data;
> 
>     data = -1;
>     switch(6)
>     {
>     case 6:
> 
>         data = ((int)(rand() & 1 ? (((unsigned)rand()<<30) ^ ((unsigned)rand()<<15) ^ rand()) : -(((unsigned)rand()<<30) ^ ((unsigned)rand()<<15) ^ rand()) - 1));
>         break;
>     default:
> 
>         printLine("Benign, fixed string");
>         break;
>     }
>     switch(8)
>     {
>     case 7:
> 
>         printLine("Benign, fixed string");
>         break;
>     default:
>     {
>         int i;
>         int * buffer = (int *)malloc(10 * sizeof(int));
>         if (buffer == 
> # 106 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_15.c" 3 4
>                      ((void *)0)
> # 106 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_15.c"
>                          ) {exit(-1);}
2814a2847,2850
>         for (i = 0; i < 10; i++)
>         {
>             buffer[i] = 0;
>         }
2815a2852,2854
>         if (data >= 0 && data < (10))
>         {
>             buffer[data] = 1;
2817c2856,2872
< void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_15_bad()
---
>             for(i = 0; i < 10; i++)
>             {
>                 printIntLine(buffer[i]);
>             }
>         }
>         else
>         {
>             printLine("ERROR: Array index is out-of-bounds");
>         }
>         free(buffer);
>     }
>     break;
>     }
> }
> 
> 
> static void goodB2G2()
2840c2895
< # 44 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_15.c" 3 4
---
> # 155 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_15.c" 3 4
2842c2897,3014
< # 44 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_15.c"
---
> # 155 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_15.c"
>                          ) {exit(-1);}
> 
>         for (i = 0; i < 10; i++)
>         {
>             buffer[i] = 0;
>         }
> 
>         if (data >= 0 && data < (10))
>         {
>             buffer[data] = 1;
> 
>             for(i = 0; i < 10; i++)
>             {
>                 printIntLine(buffer[i]);
>             }
>         }
>         else
>         {
>             printLine("ERROR: Array index is out-of-bounds");
>         }
>         free(buffer);
>     }
>     break;
>     default:
> 
>         printLine("Benign, fixed string");
>         break;
>     }
> }
> 
> 
> static void goodG2B1()
> {
>     int data;
> 
>     data = -1;
>     switch(5)
>     {
>     case 6:
> 
>         printLine("Benign, fixed string");
>         break;
>     default:
> 
> 
>         data = 7;
>         break;
>     }
>     switch(7)
>     {
>     case 7:
>     {
>         int i;
>         int * buffer = (int *)malloc(10 * sizeof(int));
>         if (buffer == 
> # 209 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_15.c" 3 4
>                      ((void *)0)
> # 209 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_15.c"
>                          ) {exit(-1);}
> 
>         for (i = 0; i < 10; i++)
>         {
>             buffer[i] = 0;
>         }
> 
> 
>         if (data >= 0)
>         {
>             buffer[data] = 1;
> 
>             for(i = 0; i < 10; i++)
>             {
>                 printIntLine(buffer[i]);
>             }
>         }
>         else
>         {
>             printLine("ERROR: Array index is negative.");
>         }
>         free(buffer);
>     }
>     break;
>     default:
> 
>         printLine("Benign, fixed string");
>         break;
>     }
> }
> 
> 
> static void goodG2B2()
> {
>     int data;
> 
>     data = -1;
>     switch(6)
>     {
>     case 6:
> 
> 
>         data = 7;
>         break;
>     default:
> 
>         printLine("Benign, fixed string");
>         break;
>     }
>     switch(7)
>     {
>     case 7:
>     {
>         int i;
>         int * buffer = (int *)malloc(10 * sizeof(int));
>         if (buffer == 
> # 264 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_15.c" 3 4
>                      ((void *)0)
> # 264 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_15.c"
2872a3045,3052
> 
> void CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_15_good()
> {
>     goodB2G1();
>     goodB2G2();
>     goodG2B1();
>     goodG2B2();
> }
2882a3063,3065
>     printLine("Calling good()...");
>     CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_15_good();
>     printLine("Finished good()");
2888,2890d3070
<     printLine("Calling bad()...");
<     CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_15_bad();
<     printLine("Finished bad()");
