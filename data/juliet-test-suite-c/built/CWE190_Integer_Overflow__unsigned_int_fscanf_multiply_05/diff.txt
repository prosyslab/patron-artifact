2819a2820,2842
> # 53 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c"
> static void goodB2G1()
> {
>     unsigned int data;
>     data = 0;
>     if(staticTrue)
>     {
> 
>         fscanf (
> # 60 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c" 3 4
>                stdin
> # 60 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c"
>                     , "%u", &data);
>     }
>     if(staticFalse)
>     {
> 
>         printLine("Benign, fixed string");
>     }
>     else
>     {
>         if(data > 0)
>         {
2820a2844,2859
>             if (data < (
> # 72 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c" 3 4
>                        (0x7fffffff * 2U + 1U)
> # 72 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c"
>                                /2))
>             {
>                 unsigned int result = data * 2;
>                 printUnsignedLine(result);
>             }
>             else
>             {
>                 printLine("data value is too large to perform arithmetic safely.");
>             }
>         }
>     }
> }
2823c2862
< void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05_bad()
---
> static void goodB2G2()
2831c2870
< # 35 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c" 3 4
---
> # 93 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c" 3 4
2833c2872
< # 35 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c"
---
> # 93 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c"
2840a2880,2937
>             if (data < (
> # 100 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c" 3 4
>                        (0x7fffffff * 2U + 1U)
> # 100 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05.c"
>                                /2))
>             {
>                 unsigned int result = data * 2;
>                 printUnsignedLine(result);
>             }
>             else
>             {
>                 printLine("data value is too large to perform arithmetic safely.");
>             }
>         }
>     }
> }
> 
> 
> static void goodG2B1()
> {
>     unsigned int data;
>     data = 0;
>     if(staticFalse)
>     {
> 
>         printLine("Benign, fixed string");
>     }
>     else
>     {
> 
>         data = 2;
>     }
>     if(staticTrue)
>     {
>         if(data > 0)
>         {
> 
>             unsigned int result = data * 2;
>             printUnsignedLine(result);
>         }
>     }
> }
> 
> 
> static void goodG2B2()
> {
>     unsigned int data;
>     data = 0;
>     if(staticTrue)
>     {
> 
>         data = 2;
>     }
>     if(staticTrue)
>     {
>         if(data > 0)
>         {
> 
2845a2943,2950
> 
> void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05_good()
> {
>     goodB2G1();
>     goodB2G2();
>     goodG2B1();
>     goodG2B2();
> }
2855a2961,2963
>     printLine("Calling good()...");
>     CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05_good();
>     printLine("Finished good()");
2861,2863d2968
<     printLine("Calling bad()...");
<     CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_05_bad();
<     printLine("Finished bad()");
