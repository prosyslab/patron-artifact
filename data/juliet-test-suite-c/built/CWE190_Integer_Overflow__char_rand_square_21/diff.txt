3731a3732
> # 54 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_21.c"
3732a3734,3737
> # 54 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_21.c"
> static int goodB2G1Static = 0;
> static int goodB2G2Static = 0;
> static int goodG2BStatic = 0;
3734a3740,3760
> static void goodB2G1Sink(char data)
> {
>     if(goodB2G1Static)
>     {
> 
>         printLine("Benign, fixed string");
>     }
>     else
>     {
> 
>         if (abs((long)data) <= (long)sqrt((double)0x7f))
>         {
>             char result = data * data;
>             printHexCharLine(result);
>         }
>         else
>         {
>             printLine("data value is too large to perform arithmetic safely.");
>         }
>     }
> }
3735a3762,3770
> static void goodB2G1()
> {
>     char data;
>     data = ' ';
> 
>     data = (char)((int)(rand() & 1 ? (((unsigned)rand()<<30) ^ ((unsigned)rand()<<15) ^ rand()) : -(((unsigned)rand()<<30) ^ ((unsigned)rand()<<15) ^ rand()) - 1));
>     goodB2G1Static = 0;
>     goodB2G1Sink(data);
> }
3737,3738d3771
< # 25 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_21.c"
< static int badStatic = 0;
3740c3773
< static void badSink(char data)
---
> static void goodB2G2Sink(char data)
3742c3775
<     if(badStatic)
---
>     if(goodB2G2Static)
3744d3776
<         {
3745a3778,3779
>         if (abs((long)data) <= (long)sqrt((double)0x7f))
>         {
3748a3783,3786
>         else
>         {
>             printLine("data value is too large to perform arithmetic safely.");
>         }
3752c3790
< void CWE190_Integer_Overflow__char_rand_square_21_bad()
---
> static void goodB2G2()
3758,3759c3796,3827
<     badStatic = 1;
<     badSink(data);
---
>     goodB2G2Static = 1;
>     goodB2G2Sink(data);
> }
> 
> 
> static void goodG2BSink(char data)
> {
>     if(goodG2BStatic)
>     {
>         {
> 
>             char result = data * data;
>             printHexCharLine(result);
>         }
>     }
> }
> 
> static void goodG2B()
> {
>     char data;
>     data = ' ';
> 
>     data = 2;
>     goodG2BStatic = 1;
>     goodG2BSink(data);
> }
> 
> void CWE190_Integer_Overflow__char_rand_square_21_good()
> {
>     goodB2G1();
>     goodB2G2();
>     goodG2B();
3770a3839,3841
>     printLine("Calling good()...");
>     CWE190_Integer_Overflow__char_rand_square_21_good();
>     printLine("Finished good()");
3776,3778d3846
<     printLine("Calling bad()...");
<     CWE190_Integer_Overflow__char_rand_square_21_bad();
<     printLine("Finished bad()");
