3240a3241
> # 73 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_21.c"
3241a3243,3259
> # 73 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_21.c"
> static int goodB2G1Static = 0;
> static int goodB2G2Static = 0;
> static int goodG2BStatic = 0;
> 
> 
> static void goodB2G1Sink(size_t data)
> {
>     if(goodB2G1Static)
>     {
> 
>         printLine("Benign, fixed string");
>     }
>     else
>     {
>         {
>             char * myString;
3244a3263,3282
>             if (data > strlen("hello") && data < 100)
>             {
>                 myString = (char *)malloc(data*sizeof(char));
>                 if (myString == 
> # 95 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_21.c" 3 4
>                                ((void *)0)
> # 95 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_21.c"
>                                    ) {exit(-1);}
> 
>                 strcpy(myString, "hello");
>                 printLine(myString);
>                 free(myString);
>             }
>             else
>             {
>                 printLine("Input is less than the length of the source string or too large");
>             }
>         }
>     }
> }
3245a3284,3286
> static void goodB2G1()
> {
>     size_t data;
3246a3288
>     data = 0;
3247a3290,3293
>     data = rand();
>     goodB2G1Static = 0;
>     goodB2G1Sink(data);
> }
3249,3250d3294
< # 29 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_21.c"
< static int badStatic = 0;
3252c3296
< static void badSink(size_t data)
---
> static void goodB2G2Sink(size_t data)
3254c3298,3340
<     if(badStatic)
---
>     if(goodB2G2Static)
>     {
>         {
>             char * myString;
> 
> 
> 
>             if (data > strlen("hello") && data < 100)
>             {
>                 myString = (char *)malloc(data*sizeof(char));
>                 if (myString == 
> # 133 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_21.c" 3 4
>                                ((void *)0)
> # 133 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_21.c"
>                                    ) {exit(-1);}
> 
>                 strcpy(myString, "hello");
>                 printLine(myString);
>                 free(myString);
>             }
>             else
>             {
>                 printLine("Input is less than the length of the source string or too large");
>             }
>         }
>     }
> }
> 
> static void goodB2G2()
> {
>     size_t data;
> 
>     data = 0;
> 
>     data = rand();
>     goodB2G2Static = 1;
>     goodB2G2Sink(data);
> }
> 
> 
> static void goodG2BSink(size_t data)
> {
>     if(goodG2BStatic)
3265c3351
< # 43 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_21.c" 3 4
---
> # 171 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_21.c" 3 4
3267c3353
< # 43 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_21.c"
---
> # 171 "/root/patron-artifact/data/juliet-test-suite-c/testcases/CWE789_Uncontrolled_Mem_Alloc/s01/CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_21.c"
3282c3368
< void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_21_bad()
---
> static void goodG2B()
3288,3290c3374,3383
<     data = rand();
<     badStatic = 1;
<     badSink(data);
---
>     data = 20;
>     goodG2BStatic = 1;
>     goodG2BSink(data);
> }
> 
> void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_21_good()
> {
>     goodB2G1();
>     goodB2G2();
>     goodG2B();
3301a3395,3397
>     printLine("Calling good()...");
>     CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_21_good();
>     printLine("Finished good()");
3307,3309d3402
<     printLine("Calling bad()...");
<     CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_21_bad();
<     printLine("Finished bad()");
